{
  "data": [
    {
      "theme": "Python",
      "question": "Как расшифровать LEGB в python ?",
      "explanation": "LEGB - это порядок, в котором Python ищет имена в пространстве имен. ",
      "correct_answer": "Local, Enclosing, Global, Built-in",
      "incorrect_answers": {
        "1": "Local, Encoded, Global, Byte-code",
        "2": "Loose, Elastic, Global, Base"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое объект верхнего уровня?",
      "explanation": "Объекты верхнего уровня в Python - это объекты, создаваемые в основной линии выполнения программы (глобальная область видимости). Они доступны из любой части вашей программы.",
      "correct_answer": "Это объекты, которые создаются в глобальной области видимости",
      "incorrect_answers": {
        "1": "Это объекты, которые создаются внутри функций ",
        "2": "Это объекты, которые создаются автоматически при запуске программы"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое точка вхождения в программу?",
      "explanation": "Это способ получения информации о объекте во время выполнения программы. Если вы используете интроспекцию в своей программе, вы можете получить информацию о типе объекта, методах, атрибутах и др.",
      "correct_answer": " Способ получения информации о объекте во время выполнения программы",
      "incorrect_answers": {
        "1": "Функция для проверки типа данных",
        "2": "Механизм для создания новых методов"
      }
    },
    {
      "theme": "Python Quiz",
      "question": "Выберите неизменяемый тип данных",
      "explanation": "tuple - является неизменяемой структурой данных, элементы в нем нельзя изменить в программе, однако если элементом является изменяемая структура данных, то ее элементы по прежнему могут быть изменены.",
      "correct_answer": "tuple",
      "incorrect_answers": {
        "1": "list",
        "2": "byte arrays",
        "3": "dict"
      }
    },
    {
      "theme": "Python",
      "question": "Что получится в результате выражения f\"{31 / 10:.5f}\" в python?",
      "explanation": "Код f\"{31 / 10:.5f}\" означает форматированную строку, которая выводит результат деления 31 на 10 с точностью до 5 знаков после запятой.",
      "correct_answer": "3.10000",
      "incorrect_answers": {
        "1": "3.1",
        "2": "3.10",
        "3": "Error"
      }
    },
    {
      "theme": "Python",
      "question": "Для чего используется магический метод getitem в python?",
      "explanation": "Этот метод позволяет обращаться к элементам объекта через оператор [], так же как это делается в списке или словаре. ",
      "correct_answer": "Для получения доступа к элементам объекта по индексу/ключу",
      "incorrect_answers": {
        "1": "Для объявления нового метода объекта",
        "2": "Для удаления элемента из объекта"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое магический метод в python?",
      "explanation": "Магический метод - это специальный метод языка, который позволяет переопределить поведение стандартных операторов и функций. Например, метод __add__ позволяет определить операцию сложения для объектов",
      "correct_answer": "Метод, который позволяет переопределить поведение стандартных операторов и функций",
      "incorrect_answers": {
        "1": "Обычная функция",
        "2": "Метод, который позволяет работать с файлами"
      }
    },
    {
      "theme": "Python",
      "question": "Какой оператор используется для проверки значений в диапазоне в Python?",
      "explanation": "Для проверки значений в диапазоне в Python используется оператор range. Он позволяет создавать последовательности целых чисел в определенном диапазоне.",
      "correct_answer": "range",
      "incorrect_answers": {
        "1": "in",
        "2": "not",
        "3": "size"
      }
    },
    {
      "theme": "Разработка ПО",
      "question": "Что такое SDLC в python?",
      "explanation": "Это цикл разработки программного обеспечения, который включает в себя несколько этапов: планирование, анализ, проектирование, реализацию, тестирование и сопровождение.",
      "correct_answer": "Это процесс разработки программного обеспечения в Python",
      "incorrect_answers": {
        "1": "Это библиотека для создания графического интерфейса",
        "2": "Это язык программирования"
      }
    },
    {
      "theme": "Python",
      "question": "С помощью чего можно создать контекстный менеджер в python?",
      "explanation": "С помощью ключевого слова with. Это позволяет создавать контекстный менеджер, который автоматически вызывает методы __enter__ и __exit__ при входе и выходе из блока кода, соответственно.",
      "correct_answer": "С помощью ключевого слова with",
      "incorrect_answers": {
        "1": " Классическим методом def",
        "2": "Через декоратор @contextmanager"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое stub файлы и для чего они нужны?",
      "explanation": "Stub-файлы содержат заглушки (dummy values) для функций, переменных и классов, а также могут содержать информацию о типах данных.",
      "correct_answer": "Файлы, содержащие заглушки (dummy values) для функций, переменных и классов.",
      "incorrect_answers": {
        "1": "Файлы, использующиеся для импорта функций из других модулей.",
        "2": "Файлы, использующиеся для тестирования производительности кода."
      }
    },
    {
      "theme": "Python",
      "question": "Чему равен результат выполнения:\r\na \u003d [1, 2, 3]\r\nb \u003d [4, 5, 6]\r\n\r\na.append(b)\r\n\r\nprint(a)",
      "explanation": "Метод append() добавляет объект b как один элемент списка a, создавая вложенный список.",
      "correct_answer": "[1, 2, 3, [4, 5, 6]]",
      "incorrect_answers": {
        "1": "[1, 2, 3, 4, 5, 6]",
        "2": "[1, 2, 3, 6, 5, 4]"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое утиная типизация в Python?",
      "explanation": "Утиная типизация означает, что тип объекта не имеет значения, если он поддерживает необходимые методы. \"Если она выглядит как утка, плавает как утка и крякает как утка, то она, вероятно, и есть утка.\"",
      "correct_answer": "Типизация, позволяющая любому объекту иметь любое поведение, если оно поддерживает необходимые метод",
      "incorrect_answers": {
        "1": "Типизация, основанная на жестко заданных типах",
        "2": "Типизация, при которой тип переменной задается автоматически"
      }
    },
    {
      "theme": "Python",
      "question": "Какие бывают виды импорта в Python?",
      "explanation": "В Python есть три способа импорта: import для импорта всего модуля, from для импорта определенных объектов из модуля и as для задания псевдонима импортированным объектам.",
      "correct_answer": "import, from, as",
      "incorrect_answers": {
        "1": "Только один",
        "2": "Импорт не нужен"
      }
    },
    {
      "theme": "Разработка ПО",
      "question": "Какие принципы управления присутствуют в методологии KANBAN?",
      "explanation": "KANBAN использует системный подход к управлению производством, учитывая все взаимосвязи и зависимости между процессами и задачами.",
      "correct_answer": "Системный подход",
      "incorrect_answers": {
        "1": "Управление изменениями",
        "2": "Управление качеством"
      }
    },
    {
      "theme": "Python",
      "question": "Чему равен результат выполнения:\r\na \u003d [1, 2, 3]\r\nb \u003d [4, 5, 6]\r\n\r\na.extend(b)\r\n\r\nprint(a)",
      "explanation": "Метод extend() добавляет элементы списка b к списку a без создания нового списка.",
      "correct_answer": "[1, 2, 3, 4, 5, 6]",
      "incorrect_answers": {
        "1": "[1, 2, 3, [4, 5, 6]]",
        "2": "[1, 2, 3, 6, 5, 4]"
      }
    },
    {
      "theme": "Python",
      "question": "Что произойдет при выполнении следующего кода?\r\na \u003d [1, 2, 3]\r\nb \u003d [4, 5, 6]\r\n\r\na.extend(b)\r\n\r\nb.append(7)\r\n\r\nprint(a)",
      "explanation": "Метод extend() добавит элементы из списка b в конец списка a до изменения списка b.",
      "correct_answer": "[1, 2, 3, 4, 5, 6]",
      "incorrect_answers": {
        "1": "[1, 2, 3, 4, 5, 6, 7]",
        "2": "[1, 2, 3, [4, 5, 6]]"
      }
    },
    {
      "theme": "OOP",
      "question": "Что такое инкапсуляция в ООП?",
      "explanation": "Инкапсуляция - свойство, позволяющее скрыть данные объекта и предоставить специальные методы для работы с ним. Она позволяет обеспечить надежность работы программы, а также упростить ее структуру.",
      "correct_answer": "Когда объекты скрывают свои данные и предоставляют только специальные методы для работы с ними",
      "incorrect_answers": {
        "1": "Процесс увеличения сложности программы",
        "2": "Свойство объекта, определяющее его видимость для других объектов"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое копирование в Python?",
      "explanation": "Копирование в Python создает ссылку на объект, что означает, что при изменении объекта, изменится и его копия. Глубокое копирование создает полную копию объекта, включая все вложенные объекты.",
      "correct_answer": "Это создание ссылки на объект",
      "incorrect_answers": {
        "1": "Это создание полной копии объекта"
      }
    },
    {
      "theme": "Python",
      "question": "Зачем используется исключение NotImplementedError?",
      "explanation": "Используется в Python для указания на то, что метод должен быть переопределен в подклассах. Оно также часто используется в абстрактных классах в сочетании с декоратором @abstractmethod. ",
      "correct_answer": "Для указания, что метод должен быть переопределен в подклассах",
      "incorrect_answers": {
        "1": "Для создания пользовательских исключений\r\n",
        "2": "Для выхода из цикла"
      }
    },
    {
      "theme": "Python",
      "question": "Можно ли создать словарь с упорядоченным набором ключей в Python?",
      "explanation": "Начиная с версии Python 3.7, словари в Python могут иметь упорядоченный набор ключей благодаря изменению реализации структуры данных словаря.",
      "correct_answer": "Да, с версии Python 3.7 словарь может иметь упорядоченный набор ключей.",
      "incorrect_answers": {
        "1": "Нет, словарь в Python не может иметь упорядоченный набор ключей.",
        "2": "Да, но только при условии использования метода sort() для упорядочивания ключей словаря.",
        "3": "Да, но только при условии использования метода order() для создания словаря с упорядоченными ключами"
      }
    },
    {
      "theme": "Python",
      "question": "Что делает метод mro() ?",
      "explanation": "Метод mro() возвращает порядок разрешения методов для объекта в Python. Этот порядок определяет, какой метод будет вызван, если метод имеет несколько реализаций в родительских классах.",
      "correct_answer": "Возвращает порядок разрешения методов для объекта",
      "incorrect_answers": {
        "1": "Возвращает список всех методов объекта",
        "2": "Возвращает список всех атрибутов объекта"
      }
    },
    {
      "theme": "Python",
      "question": "Что означает \"is\" в Python?",
      "explanation": "Оператор \"is\" сравнивает идентичность объектов, т.е. проверяет, указывают ли две переменные на один и тот же объект в памяти. ",
      "correct_answer": "оператор сравнения идентичности объектов",
      "incorrect_answers": {
        "1": "оператор сравнения значений",
        "2": "оператор присваивания"
      }
    },
    {
      "theme": "Алгоритмы",
      "question": "Что такое сложность алгоритма ?",
      "explanation": "Время выполнения алгоритма. Сложность алгоритма определяет время, необходимое для его выполнения и зависит от количества операций, выполняемых алгоритмом.",
      "correct_answer": "Время выполнения алгоритма",
      "incorrect_answers": {
        "1": "Количество строк кода",
        "2": "Сложность математических операций"
      }
    },
    {
      "theme": "Разработка ПО",
      "question": "Какой принцип лежит в основе методологии KANBAN?",
      "explanation": "Принцип just-in-time заключается в том, чтобы обеспечивать производство и доставку продукции только в том объеме, в котором она требуется в данный момент.",
      "correct_answer": "Just-in-time (вовремя)",
      "incorrect_answers": {
        "1": "Дизайн-мышление",
        "2": "Линейное программирование"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое переменная в Python?",
      "explanation": "Переменная в Python - это имя, которое ссылается на объект, который может быть числом, строкой, списком, функцией и т.д. Она используется для хранения данных и обращения к ним в коде.",
      "correct_answer": "Это имя, которое ссылается на объект в Python",
      "incorrect_answers": {
        "1": "Это структура данных в Python",
        "2": "Это функция в Python"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое отвлеченный класс в Python?",
      "explanation": "Отвлеченный класс в Python – это класс, который находится вне иерархии наследования и не имеет прямого отношения к другим классам.",
      "correct_answer": "Класс, который находится вне иерархии наследования",
      "incorrect_answers": {
        "1": "Класс, который создается при помощи функции def",
        "2": "Класс, который передает управление родительскому классу"
      }
    },
    {
      "theme": "Python",
      "question": "Для чего нужен __init__.py?",
      "explanation": "Для определения пакета. Файл __init__.py является обязательным файлом для каждого пакета в Python, и его наличие позволяет интерпретатору Питона определить директорию как пакет. \r\n",
      "correct_answer": "Для определения пакета",
      "incorrect_answers": {
        "1": "Для обработки исключений",
        "2": " Для создания объектов"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое область видимости в python?",
      "explanation": "Область видимости в Python — это области имен в модуле или функции, где определенная переменная или функция может быть использована. Области бывают глобальными, локальными и нелокальными.",
      "correct_answer": "Это области имен в модуле или функции",
      "incorrect_answers": {
        "1": "Часть кода программы, где доступны переменные и функции",
        "2": "Это параметры функции",
        "3": "Это условия в циклах и блоках условного оператора"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое массив в python?",
      "explanation": "Это упорядоченный набор элементов одного типа. Массив в python – это структура данных, которая позволяет хранить однотипные элементы в памяти и обращаться к ним по индексу. \r\n",
      "correct_answer": "это упорядоченный набор элементов одного типа",
      "incorrect_answers": {
        "1": "это функция для работы с текстом",
        "2": "это функция для работы с числами"
      }
    },
    {
      "theme": "Python",
      "question": "Что произойдет при выполнении следующего кода?\r\na \u003d [1, 2, 3]\r\nb \u003d [4, 5, 6]\r\n\r\na.append(b)\r\n\r\nb.append(7)\r\n\r\nprint(a)",
      "explanation": "Метод append() добавит объект b в конец списка a как один элемент. Если список b изменится, изменится и элемент списка a, содержащий b.",
      "correct_answer": "[1, 2, 3, 4, 5, 6, [7]]",
      "incorrect_answers": {
        "1": "[1, 2, 3, 4, 5, 6, 7]",
        "2": "[1, 2, 3, [4, 5, 6]]"
      }
    },
    {
      "theme": "OOP",
      "question": "Что такое наследование в ООП?",
      "explanation": "Наследование позволяет создавать новые классы на основе уже существующих, наследовать их свойства и методы, а также расширять и изменять их.",
      "correct_answer": "способность класса наследовать свойства и методы родительского класса",
      "incorrect_answers": {
        "1": "механизм создания объектов в программировании",
        "2": "процесс передачи данных между объектами"
      }
    },
    {
      "theme": "Python",
      "question": "Какую функцию выполняет метод center() в Python?",
      "explanation": "Выравнивает строку по центру заданной длины символов. Этот метод принимает один аргумент - число, которое указывает, сколько символов должно быть в итоговой строке после выравнивания.",
      "correct_answer": "Выравнивает строку по центру",
      "incorrect_answers": {
        "1": "Выравнивает строку по правому краю",
        "2": "Выравнивает строку по левому краю"
      }
    },
    {
      "theme": "OOP",
      "question": "Какие основные принципы ООП?",
      "explanation": "Наследование-создает классы на основе существующих классов. Инкапсуляция-защищает данные и методы класса от неправильного использования. Полиморфизм-использует объекты разных классов как одинаковые. ",
      "correct_answer": "Наследование, инкапсуляция, полиморфизм",
      "incorrect_answers": {
        "1": "Константы, переменные, функции",
        "2": "Резистенция, локомотивность, чистота"
      }
    },
    {
      "theme": "Python",
      "question": "Как в Python получить самую позднюю букву в строке?",
      "explanation": "С помощью slice можно получить последний символ строки, указав индекс -1.",
      "correct_answer": "Методом slice",
      "incorrect_answers": {
        "1": "Методом index",
        "2": "Методом len"
      }
    },
    {
      "theme": "Python",
      "question": "Какой вид форматирования называется классическим ?",
      "explanation": "Классическим форматированием в python называют форматирование через знак (%)",
      "correct_answer": "%",
      "incorrect_answers": {
        "1": ".format()",
        "2": "f-форматирвоание",
        "3": "format()",
        "4": "from string import Template"
      }
    },
    {
      "theme": "Python",
      "question": "Что происходит, когда сборщик мусора в Python не может освободить память?",
      "explanation": "Если сборщик мусора не может освободить память, он замедляет сборку мусора, что может негативно сказаться на производительности программы.",
      "correct_answer": "Сборка мусора замедляется",
      "incorrect_answers": {
        "1": "Интерпретатор Python аварийно завершается",
        "2": "Никак не влияет на работу программы"
      }
    },
    {
      "theme": "Python Quiz",
      "question": "Выберите изменяемый тип данных",
      "explanation": "dict - является изменяемым типом данных, его данные можно изменять по ходу действия программы",
      "correct_answer": "dict",
      "incorrect_answers": {
        "1": "float",
        "2": "tuple",
        "3": "frozenset",
        "4": "str"
      }
    },
    {
      "theme": "Python",
      "question": "Что  такое GIL?",
      "explanation": "то механизм, используемый интерпретатором Python, чтобы обеспечить многопоточность. Это блокирует выполнение других потоков в то время, когда один поток выполняется",
      "correct_answer": "Глобальный интерпретатор блокировки",
      "incorrect_answers": {
        "1": "Глобальный инкрементальный логарифм",
        "2": "Глобальный цикл вывода"
      }
    },
    {
      "theme": "Python",
      "question": "Для чего нужна функция issubclass ?",
      "explanation": "Функция issubclass позволяет определить, является ли класс подклассом другого класса. Она принимает два аргумента - класс и класс, который необходимо проверить на наследование.",
      "correct_answer": "Функция позволяет определить, является ли класс наследником другого класса",
      "incorrect_answers": {
        "1": "Для создания нового класса",
        "2": "Для определения принадлежности функции к определенному классу"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое рекурсия в python?",
      "explanation": "Рекурсия в Python является способом перехода от одного состояния задачи к другому, разбивая её на меньшие подзадачи. Это достигается за счет вызова функцией самой себя.",
      "correct_answer": "Способ перехода от одного состояния задачи к другому, разбивая её на меньшие подзадачи.",
      "incorrect_answers": {
        "1": "Устройство хранения структурированных данных.",
        "2": "Совокупность инструкций, выполняющих определённую операцию.",
        "3": "Функция, которая возвращает своё же значение."
      }
    },
    {
      "theme": "Python",
      "question": "Что такое тернарный оператор в Python?",
      "explanation": "Тернарный оператор в Python - это синтаксический сахар, он позволяет записать условное выражение в более компактной форме. Он имеет следующую структуру: \"условие1 if условие else условие\"",
      "correct_answer": "Оператор, который позволяет сократить запись условного выражения",
      "incorrect_answers": {
        "1": "Оператор, который работает только с целыми числами",
        "2": "Оператор, который работает только с булевыми значениями"
      }
    },
    {
      "theme": "Python",
      "question": "Что используется в Python для проверки, что строка состоит только из чисел?",
      "explanation": "isnumeric(). Этот метод проверяет, являются ли все символы строки числовыми. \r\n",
      "correct_answer": "isnumeric()",
      "incorrect_answers": {
        "1": "isalpha()",
        "2": "isdigit()"
      }
    },
    {
      "theme": "Python",
      "question": "Какие методы используются в Python для работы с сборщиком мусора?",
      "explanation": "Чтобы работать с сборщиком мусора в Python, можно использовать как weakref, так и garbage_collect().\r\n",
      "correct_answer": "и то, и другое",
      "incorrect_answers": {
        "1": "garbage_collect()",
        "2": "weakref"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое декоратор в python?",
      "explanation": "Декоратор - это функция, которая создает другую функцию и позволяет расширить ее поведение без изменения самой функции. ",
      "correct_answer": "Функция, которая создает другую функцию с новым поведением",
      "incorrect_answers": {
        "1": "Функция, которая используется для выполнения действия перед выполнением другой функции",
        "2": "Конструкция, используемая для создания классов со специальным поведением"
      }
    },
    {
      "theme": "Разработка ПО",
      "question": "Для чего используется SCRUM?",
      "explanation": "SCRUM используется для улучшения процесса разработки и повышения качества продукта.",
      "correct_answer": "Для улучшения процесса разработки",
      "incorrect_answers": {
        "1": "Для создания сложных алгоритмов",
        "2": "Для тестирования кода"
      }
    },
    {
      "theme": "Python",
      "question": "Какой оператор используется для присваивания значения переменной в Python?",
      "explanation": "Оператор \"\u003d\" используется для присваивания значения переменной.",
      "correct_answer": "\"\u003d\"",
      "incorrect_answers": {
        "1": "\"\u003d\u003d\"",
        "2": "\"is\""
      }
    },
    {
      "theme": "Разработка ПО",
      "question": "Что такое SCRUM?",
      "explanation": "Метод управления проектами, в котором работа разбивается на короткие интервалы с постоянной обратной связью между командой и заказчиком.",
      "correct_answer": "Методология управления проектами",
      "incorrect_answers": {
        "1": "Объектно-ориентированный язык программирования",
        "2": "Фреймворк для тестирования кода"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое исключения в Python?",
      "explanation": "Это специальные объекты, которые создаются при возникновении ошибок во время выполнения программы, такие как деление на ноль, вызов несуществующей переменной и т.д.)\r\n",
      "correct_answer": "Ошибки, возникающие при выполнении программы",
      "incorrect_answers": {
        "1": "Библиотека для работы с исключительными ситуациями",
        "2": "Синтаксические ошибки при написании кода"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое замыкание в python?",
      "explanation": "Замыкание - это функция, которая была создана внутри другой функции и имеет доступ к переменным этой внешней функции.",
      "correct_answer": "Функция, созданная внутри другой функции",
      "incorrect_answers": {
        "1": "Набор функций",
        "2": "Ошибка в Python"
      }
    },
    {
      "theme": "Python",
      "question": "Для чего нужен метод super() в python?",
      "explanation": "Метод super() используется для вызова метода родительского класса в дочернем классе в случае, если у дочернего класса есть своя собственная реализация этого метода.",
      "correct_answer": "Для вызова метода родительского класса",
      "incorrect_answers": {
        "1": "Для создания экземпляра класса",
        "2": "Для выполнения арифметических операций"
      }
    },
    {
      "theme": "Python",
      "question": "Как работает сборщик мусора в Python?",
      "explanation": "Сборщик мусора Python отслеживает объекты и удаляет те,на которые нет ссылок в программе.Он работает автоматически, поэтому программисту не нужно вручную освобождать память, используемую неисп. обък.",
      "correct_answer": "Он определяет, какие объекты больше не используются и удаляет их из памяти",
      "incorrect_answers": {
        "1": "Он удаляет все объекты из памяти",
        "2": "Он не работает в Python"
      }
    },
    {
      "theme": "Python",
      "question": "Какой функционал даёт метод partition в Python?",
      "explanation": "Метод partition в Python разбивает строку на три подстроки, используя заданный разделитель. Возвращает кортеж из трёх элементов: строка до разделителя, разделитель и строка после разделителя.",
      "correct_answer": "Разделяет строку на подстроки по заданному разделителю.",
      "incorrect_answers": {
        "1": "Разбивает список на два по заданному условию.",
        "2": "Сортирует список по заданной функции.",
        "3": "Возвращает длину строки."
      }
    },
    {
      "theme": "Python",
      "question": "Как объединить два списка в список кортежей?",
      "explanation": "Кортежи - это структура данных, которая подобна спискам, но не может быть изменена после создания. Для объединения двух списков в список кортежей можно использовать функцию zip().",
      "correct_answer": "Это структура данных, которая неизменяема в процессе выполнения программы",
      "incorrect_answers": {
        "1": "Это структура данных, которая изменяема в процессе выполнения программы",
        "2": "Это способ объединения двух списков в один"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое перегрузка операторов в Python?",
      "explanation": "Перегрузка операторов в Python – это возможность с помощью специальных методов в классах переопределять различные операторы языка. Имена таких методов включают двойное подчеркивание спереди и сзади.",
      "correct_answer": "возможность определять свой собственный функционал для стандартных операторов",
      "incorrect_answers": {
        "1": "возможность обращения к операторам по-разному",
        "2": "использование операторов внутри функций"
      }
    },
    {
      "theme": "Python",
      "question": "Что означает положительный результат выполнения проверки на совместимость типов оператором isinstance ?",
      "explanation": "Положительный результат выполнения проверки isinstance означает, что объект является экземпляром заданного класса (или его потомков).",
      "correct_answer": "Объект является экземпляром класса.",
      "incorrect_answers": {
        "1": "Объект может быть преобразован к заданному типу.",
        "2": "Объект соответствует заданному типу данных."
      }
    },
    {
      "theme": "OOP",
      "question": "Что такое множественное наследование в ООП?",
      "explanation": "Наследование от нескольких классов.\r\nМножественное наследование позволяет классу наследовать свойства и методы от нескольких родительских классов. ",
      "correct_answer": "Наследование от нескольких классов",
      "incorrect_answers": {
        "1": "Наследование только от одного класса",
        "2": "Наследование только от интерфейсов"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое list comprehension?",
      "explanation": "List comprehension - это способ создания списка в python, используя одну строку кода. Он позволяет создавать списки так же, как делают это генераторы, но в виде списка. ",
      "correct_answer": "Это способ создания списка с использованием одной строки кода",
      "incorrect_answers": {
        "1": " Это способ создания множества/словаря в python",
        "2": "Это способ создания функции в python\r\n"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое *args, **kwargs в python?",
      "explanation": "*args и **kwargs - это специальный синтаксис в Python. *args передает произвольное количество неименованных аргументов в виде кортежа, а **kwargs - в виде словаря.",
      "correct_answer": "Обозначение неопределенного количества аргументов в функции",
      "incorrect_answers": {
        "1": "Специальный синтаксис для определения аргументов функции",
        "2": "Аргументы функции, передаваемые в виде словаря",
        "3": "Аргументы функции, передаваемые в виде списка"
      }
    },
    {
      "theme": "Разработка ПО",
      "question": "Какое место занимает SCRUM среди языков программирования?",
      "explanation": "SCRUM - это методология управления проектами, а не язык программирования или фреймворк",
      "correct_answer": "Методология",
      "incorrect_answers": {
        "1": "Фреймворк",
        "2": "Язык программирования"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое итератор?",
      "explanation": "Итератор в Python - это объект, который генерирует последовательность значений и используется для обхода коллекций (например, списков, кортежей, словарей и т.д.) и выполнения операций с ними.",
      "correct_answer": "Объект, который генерирует последовательность значений.",
      "incorrect_answers": {
        "1": "Функция, которая принимает последовательность и применяет к каждому её элементу заданную операцию.",
        "2": "Объект, содержащий один или несколько элементов, которые можно перебирать."
      }
    },
    {
      "theme": "Python",
      "question": "Как обрабатывать исключения в Python?",
      "explanation": "Для обработки исключений в Python используется оператор try-except, который позволяет отловить исключение и выполнить какой-то код в зависимости от его типа.",
      "correct_answer": "Использовать оператор try-except",
      "incorrect_answers": {
        "1": "Использовать оператор if-else",
        "2": "Ничего не делать"
      }
    },
    {
      "theme": "Python",
      "question": "Какой минус связан с использованием GIL в Python?",
      "explanation": "Из-за блокировки многопоточности GIL может снижать производительность при работе с многопоточностью в Python. ",
      "correct_answer": "Снижение производительности при работе с многопоточностью",
      "incorrect_answers": {
        "1": "Несовместимость с другими языками программирования",
        "2": "Увеличение вероятности ошибок приложения",
        "3": "Ограничение доступа к определенным функциям языка"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое аннотации типов в python?",
      "explanation": "Аннотации типов - это специальный синтаксис для определения типа объекта. Они не требуются для выполнения кода, но могут помочь в его понимании и автоматических проверках типов.",
      "correct_answer": "это специальный синтаксис для определения типа переменной или возвращаемого значения функции",
      "incorrect_answers": {
        "1": "это инструкции языка, которые производят поиск ошибок в коде",
        "2": "это строковые значения, которые назначаются переменной или функции для облегчения чтения кода",
        "3": "это название переменных и функций, которое используется для более понятного кода"
      }
    },
    {
      "theme": "Python",
      "question": "Какой магический метод в python отвечает за обращение к объекту по индексу? ",
      "explanation": "Метод __getitem__ используется для обращения к элементу объекта по индексу или срезу. Он может быть определен в пользовательских классах и позволяет использовать объекты как список или словарь.",
      "correct_answer": "__getitem__",
      "incorrect_answers": {
        "1": "__setitem__",
        "2": "__getattr__"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое функция в python ?",
      "explanation": "В Python функция - это именованный блок кода, который можно вызывать из программы. В функции могут быть необязательные аргументы со значениями по умолчанию и именованные аргументы.",
      "correct_answer": "Функция - это именованный блок кода, который можно вызывать из программы.",
      "incorrect_answers": {
        "1": "Функция - это инструкция языка, выполняющая определенную операцию.",
        "2": "Функция - это модуль, который можно импортировать для использования в программе.",
        "3": "Функция - это строка, которая может содержать переменные.\r\n"
      }
    },
    {
      "theme": "Python",
      "question": "Что представляет собой словарь в Python?",
      "explanation": "Словарь в Python – это неупорядоченная коллекция пар ключ-значение. Ключи уникальны, и к ним можно обращаться для получения соответствующих значений",
      "correct_answer": "Коллекцию неупорядоченных пар ключ-значение ",
      "incorrect_answers": {
        "1": "Коллекцию упорядоченных элементов",
        "2": "Матрицу значений"
      }
    },
    {
      "theme": "Разработка ПО",
      "question": "Какие основные принципы входят в SCRUM?",
      "explanation": "В SCRUM входят принципы: атмосфера доверия, самоорганизация команды, непрерывное улучшение продукта и процесса разработки.",
      "correct_answer": "Атмосфера доверия, самоорганизация и непрерывное улучшение",
      "incorrect_answers": {
        "1": "Работа по графику и различные этапы разработки",
        "2": "Работа с ошибками и их исправление"
      }
    },
    {
      "theme": "Python",
      "question": "Сколько пар ключ значение может быть в словаре в python?",
      "explanation": "В Python нет ограничений на количество пар ключ-значение в словаре.\r\nНапример, вы можете добавлять пары ключ-значение до тех пор, пока у вас есть достаточно памяти на хранение словаря.",
      "correct_answer": "Неограниченное количество",
      "incorrect_answers": {
        "1": "Максимальное количество зависит от версии Python",
        "2": "До 2**31-1 пары ключ-значение"
      }
    },
    {
      "theme": "Python",
      "question": "Для чего нужен метод swapcase в python?",
      "explanation": "Метод swapcase меняет регистр символов в строке на противоположный. Например, \"Hello, World!\" станет \"hELLO, wORLD!\".",
      "correct_answer": "Для меняет регистр символов в строке на противоположный.",
      "incorrect_answers": {
        "1": " Для перевода строки в верхний регистр.",
        "2": "Для удаления пробелов в начале и конце строки.",
        "3": "Для замены одной подстроки на другую в строке."
      }
    },
    {
      "theme": "Python",
      "question": "Что такое Api?",
      "explanation": "Api - это интерфейс для взаимодействия программы с внешними сервисами и приложениями",
      "correct_answer": "Интерфейс для взаимодействия программы с внешними сервисами и приложениями",
      "incorrect_answers": {
        "1": "Методы и функции, позволяющие работать с файловой системой",
        "2": "Библиотека для работы с базами данных"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое контекстный менеджер в Python?",
      "explanation": "Контекстный менеджер в Python используется для управления контекстом выполнения кода. Он определяет блок кода, который должен быть выполнен при входе в контекст, и блок кода, выполняемый при выходе.",
      "correct_answer": " Это инструмент для управления контекстом выполнения кода в Python",
      "incorrect_answers": {
        "1": "Это менеджер окон в графическом интерфейсе Python",
        "2": "Это менеджер памяти в Python"
      }
    },
    {
      "theme": "Python",
      "question": "Почему системные и сторонние библиотеки/модули импортируются раньше чем пользовательские?",
      "explanation": "Python ищет импортируемые модули сначала в текущей дирек-ии,затем в стандартных дирек-ии.,где хранятся системные и сторонние модули.Если модуль не найден,то Python проходит к следующей строке импорта.",
      "correct_answer": "Так устроен язык Python - сначала ищутся системные и сторонние библиотеки, затем пользовательские.",
      "incorrect_answers": {
        "1": "Это не так, порядок импортирования не влияет на работу программы.",
        "2": "Это зависит от того, какие библиотеки указаны в файле requirements.txt.\r\n"
      }
    },
    {
      "theme": "Python",
      "question": "В чем разница между потоками и процессами?",
      "explanation": "Потоки - это циклы выполнения приложения, которые работают параллельно с другими потоками внутри одного процесса. Процессы - это отдельные экземпляры программы, запущенные в операционной системе. ",
      "correct_answer": "Потоки-части процесса, они могут выполняться параллельно; Процессы - отдельные экземпляры программы",
      "incorrect_answers": {
        "1": "Процессы -части потоков, которые могут выполняться параллельно;потоки -отдельно запущенный экземпляр",
        "2": "Одно и то же"
      }
    },
    {
      "theme": "Разработка ПО",
      "question": "Что такое Agile в python?",
      "explanation": "Agile - это методология разработки ПО, которая способствует гибкости при изменении требований и быстрому реагированию на изменения",
      "correct_answer": "Методология разработки программного обеспечения, которая способствует гибкости при изменении требова",
      "incorrect_answers": {
        "1": "Фреймворк для автоматической сборки кода",
        "2": "Система контроля версий"
      }
    },
    {
      "theme": "Python",
      "question": "Какие проблемы возникают с подсчётом ссылок?",
      "explanation": "Обработка HTML-разметки может быть сложной. Некоторые ссылки могут быть определены некорректно или не будут учтены при подсчёте. ",
      "correct_answer": "Некорректный подсчёт ссылок на странице",
      "incorrect_answers": {
        "1": "Ошибочное определение ссылок",
        "2": "Оба варианта верны"
      }
    },
    {
      "theme": "Python",
      "question": "Какая сложность алгоритма при доступе к элементам dict?",
      "explanation": "Объяснение: В словаре dict в Python доступ к элементам осуществляется по ключу за время O(1), что является очень эффективным при больших объемах данных. Это возможно благодаря использованию хэш-таблиц",
      "correct_answer": "O(1)",
      "incorrect_answers": {
        "1": "O(log n)",
        "2": "O(n)"
      }
    },
    {
      "theme": "Python",
      "question": "Что произойдет при выполнении следующего кода?\r\na \u003d [1, 2, 3]\r\nb \u003d [4, 5, 6]\r\na.append(b)\r\n\r\nprint(len(a))\r\n",
      "explanation": "Список a будет иметь 4 элемента: [1, 2, 3, [4, 5, 6]].",
      "correct_answer": "4",
      "incorrect_answers": {
        "1": "3",
        "2": "6"
      }
    },
    {
      "theme": "Python",
      "question": "Какая роль у сборщика мусора в связке с GIL в Python?",
      "explanation": "Сборщик мусора в Python обходит GIL для сборки мусора, чтобы предотвратить утечки памяти в многопоточном окружении.",
      "correct_answer": "Он обходит GIL для сборки мусора",
      "incorrect_answers": {
        "1": "Он помогает GIL освободить память",
        "2": "Не имеет значения"
      }
    },
    {
      "theme": "Python",
      "question": "Какой плюс связан с использованием GIL в Python?",
      "explanation": "GIL может облегчать разработку многопоточных приложений в Python благодаря защите от состояний гонки.",
      "correct_answer": "Облегчение разработки многопоточных приложений",
      "incorrect_answers": {
        "1": "Увеличение скорости работы и оптимизация памяти",
        "2": "Улучшение безопасности приложения",
        "3": "Отсутствие необходимости в управлении памятью"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое функция генератор в Python?",
      "explanation": "Это функция, которая возвращает последовательность значений по требованию. Функции генераторы создаются специальным синтаксисом и работают аналогично объектам-генераторам.",
      "correct_answer": "Это функция, которая возвращает последовательность значений по требованию",
      "incorrect_answers": {
        "1": "Это функция, которая создает объекты-генераторы",
        "2": "Это функция, которая генерирует случайные числа"
      }
    },
    {
      "theme": "Python",
      "question": "Какой оператор используется для сравнения значений объектов в Python?",
      "explanation": "Оператор \"\u003d\u003d\" используется для сравнения значений объектов, т.е. проверяет, равны ли значения двух объектов.",
      "correct_answer": "\"\u003d\u003d\"",
      "incorrect_answers": {
        "1": "\"\u003d\"",
        "2": "\"is\""
      }
    },
    {
      "theme": "Python",
      "question": "Что такое unittests в Python?",
      "explanation": "unittests - модуль Python для написания автоматических тестов, который облегчает проверку правильности работы кода программы.",
      "correct_answer": "Модуль для написания тестов",
      "incorrect_answers": {
        "1": "Инструмент для отладки",
        "2": "Библиотека для визуализации данных"
      }
    },
    {
      "theme": "Python",
      "question": "Что делает функция isalnum ?",
      "explanation": "Эта функция возвращает истину, если все символы в строке являются алфавитно-цифровые и есть по крайней мере один символ, иначе ложь.",
      "correct_answer": "Вернет True, если в строке есть хотя бы один символ и все символы строки это цифры или буквы",
      "incorrect_answers": {
        "1": "Вернёт True , если в строке хотя бы одно число",
        "2": "Вернёт True , если в строке хотя бы одна буква"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое assert?",
      "explanation": "Assert - оператор, который позволяет проверять утверждения, при этом программа будет остановлена в случае, если утверждение оказалось ложным.",
      "correct_answer": "Оператор для проверки утверждений",
      "incorrect_answers": {
        "1": "Функция для вывода результата на экран",
        "2": "Условный оператор в Python"
      }
    },
    {
      "theme": "Python",
      "question": "Для чего нужна функция chain из модуля itertools в Python?",
      "explanation": " Функция chain объединяет несколько итерируемых объектов в один. Это удобно, когда нужно последовательно обрабатывать несколько коллекций данных без их копирования или объединения в один список.",
      "correct_answer": "Для объединения нескольких итерируемых объектов в один.",
      "incorrect_answers": {
        "1": "Для преобразования итерируемого объекта в уплощенный список.",
        "2": "Для получения всех возможных перестановок элементов итерируемого объекта."
      }
    },
    {
      "theme": "Python",
      "question": "Какой символ используется для задания условного оператора if в Python? ",
      "explanation": "Для задания условного оператора if в Python используется символ \"\u003d\u003d\". Он проверяет, являются ли два значения равными. Если это так, то выполняется определенное действие. ",
      "correct_answer": "\u003d\u003d",
      "incorrect_answers": {
        "1": "++",
        "2": "--",
        "3": "\u003d"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое анонимная функция в python?",
      "explanation": "Анонимная функция - это функция, объявленная без имени с помощью lambda. Она может принимать любое количество аргументов и возвращает результат выражения, составленного после «:».",
      "correct_answer": "Функция, объявленная без имени",
      "incorrect_answers": {
        "1": "Функция для работы с файлами и директориями",
        "2": "Разновидность декораторов в Python",
        "3": "Функция для копирования файлов"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое интроспекция в python?",
      "explanation": "это способность языка получать информацию о типе и структуре объекта во время выполнения программы, то есть во время ее работы. ",
      "correct_answer": "Способ получения информации о типе и атрибутах объекта",
      "incorrect_answers": {
        "1": "Метод создания нового объекта в Python",
        "2": "Название функции для работы с графическими интерфейсами"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое условные операторы?",
      "explanation": "Условные операторы позволяют задать условие, при котором определенные действия будут выполнены. В Python наиболее распространенные условные операторы это if, elif и else. ",
      "correct_answer": "Операторы, которые выполняют какие-то действия по условию",
      "incorrect_answers": {
        "1": "Операторы, которые выполняют только одно действие",
        "2": "Операторы, которые не могут работать с условиями"
      }
    },
    {
      "theme": "OOP",
      "question": "Что такое абстракция в ООП?",
      "explanation": "Пример - класс \"Телефон\", который имеет свойства \"Модель\", \"Хранилище\", \"Цвет\". Абстракция заключается в том, что пользователю не нужно знать, как происходит хранение и передача данных внутри телефона",
      "correct_answer": "Процесс выделения значимых характеристик и сокрытия деталей реализации ",
      "incorrect_answers": {
        "1": "Процесс изменения внутренней реализации объекта ",
        "2": "Процесс оптимизации алгоритмов и написания быстрого кода"
      }
    },
    {
      "theme": "Python",
      "question": "Чем файл .pyc отличается от .py ?",
      "explanation": "Файлы .pyc являются скомпилированными версиями .py файлов, созданными интерпретатором Python. Они содержат байт-код, который может быть выполняемым на любой платформе, где установлен Python.",
      "correct_answer": "Файлы .pyc являются скомпилированными версиями .py файлов.",
      "incorrect_answers": {
        "1": "Файлы .py не нуждаются в компиляции, в отличие от файлов .pyc.",
        "2": "Файлы .pyc содержат исходный код программы.",
        "3": "Файлы .pyc используются только для хранения тестовых данных."
      }
    },
    {
      "theme": "Python",
      "question": "Что такое сериализация и десериализация? ",
      "explanation": "Сериализация - процесс преобразования данных Python в поток байтов, который может быть сохранен в файле или передан по сети. Десериализация - процесс восстановления данных из сериализованного потока.",
      "correct_answer": "Преобразование данных в последовательность байтов и обратно",
      "incorrect_answers": {
        "1": "Методы работы с сетевыми протоколами",
        "2": "Форматирование текстовых файлов"
      }
    },
    {
      "theme": "OOP",
      "question": "Чем отличаются процедурная и объектов-ориентированная парадигмы программирования?",
      "explanation": "Процедурная парадигма использует функции, которые могут быть вызваны из других функций, чтобы решить определенную задачу. В объектно-ориентированной парадигме используются классы и методы классов.",
      "correct_answer": "В процедурной парадигме используются функции, в объектно-ориентированной - классы. ",
      "incorrect_answers": {
        "1": "В процедурной парадигме используются объекты, в объектно-ориентированной - функции.",
        "2": "Нет основной разницы между этими двумя парадигмами.\r\n"
      }
    },
    {
      "theme": "Python",
      "question": "Какую роль играет GIL в языке Python?",
      "explanation": "GIL (Global Interpreter Lock) блокирует многопоточность в Python, что обеспечивает защиту от состояний гонки. ",
      "correct_answer": "Защита от многопоточности",
      "incorrect_answers": {
        "1": "Оптимизация памяти",
        "2": "Многозадачность",
        "3": "Обеспечение безопасности"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое Хэш-функция?",
      "explanation": "Хэш-функция преобразует данные в уникальную строку фиксированной длины, которая может использоваться для проверки целостности данных и быстрого поиска. ",
      "correct_answer": "Это функция, которая преобразует данные в уникальную строку фиксированной длины",
      "incorrect_answers": {
        "1": "Это функция, которая шифрует данные для безопасной передачи",
        "2": "Это функция, которая кодирует данные в байтовую строку"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое генератор в Python?",
      "explanation": "Генератор в Python является функцией, которая возвращает итератор, поэтому его можно использовать для создания последовательностей, которые можно перебирать. ",
      "correct_answer": "Функция, возвращающая последовательность значений, которые можно перебирать",
      "incorrect_answers": {
        "1": "Объект, который генерирует последовательность значений",
        "2": "Описание структуры данных",
        "3": "Метод, позволяющий работать с файлами"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое приглашение интерпретатора (interpreter prompt) в Python?",
      "explanation": "Текстовый интерфейс для ввода команд, который позволяет выполнить код на языке построчно.Он позволяет быстро проверить работу отдельных участков кода и использовать интерпретатор в качестве каль-ра.",
      "correct_answer": "Текстовый интерфейс для ввода команд",
      "incorrect_answers": {
        "1": "Программа для автоматического тестирования кода",
        "2": "Графический интерфейс для написания кода"
      }
    },
    {
      "theme": "Разработка ПО",
      "question": "Что такое инженерия и процесс разработки в целом?",
      "explanation": "Инженерия в области программирования – это разработка ПО с использованием современных методологий и технологий, высокопроизводительных алгоритмов, эффективных инструментов для разработки и теста.",
      "correct_answer": "Профессиональный подход к созданию программного обеспечения",
      "incorrect_answers": {
        "1": "Изучение живых систем",
        "2": "Вид спорта, напоминающий головоломку"
      }
    },
    {
      "theme": "Python",
      "question": "Какие значения могут принимать условия в условных операторах Python?",
      "explanation": "Условия в условных операторах Python могут принимать любые значения, включая числа, строки, логические значения (True или False), переменные и т.д. ",
      "correct_answer": "Любые значения",
      "incorrect_answers": {
        "1": "Только числа ",
        "2": "Только строки "
      }
    },
    {
      "theme": "Python",
      "question": "Что такое send? Throw? Как написать нескончаемый генератор?",
      "explanation": "Send и Throw являются методами объекта генератора. Для написания нескончаемого генератора используется конструкция while True и yield. \r\n",
      "correct_answer": "Send и Throw - методы объекта генератора, для написания нескончаемого генератора используется while ",
      "incorrect_answers": {
        "1": "Send и Throw - методы объекта итератора, нескончаемый генератор пишется с помощью yield from",
        "2": "Send и Throw - методы объекта строки, для нескончаемого генератора используется while True",
        "3": "Send и Throw - методы объекта генератора, нескончаемый генератор писать невозможно"
      }
    },
    {
      "theme": "Python",
      "question": "Что произойдет при импортировании модуля если в пространстве имен уже существует имя импортированного модуля?",
      "explanation": "Модуль импортируется только в том случае, если определенное имя не является именем модуля.",
      "correct_answer": "Модуль импортируется только в том случае, если определенное имя не является именем модуля.",
      "incorrect_answers": {
        "1": "Имя импортированного модуля заменит существующее имя в пространстве имен",
        "2": "Будет возбуждено исключение ImportError"
      }
    },
    {
      "theme": "Python",
      "question": "В чем различие между изменяемыми и неизменяемыми типами данных?",
      "explanation": "Изменяемые типы данных, такие как list или dict, могут быть изменены по ссылке, то есть изменения объекта влекут изменения во всех его ссылках. В то время как неизменяемые типы данных, такие как str и",
      "correct_answer": "Изменяемые типы данных могут изменяться по ссылке, а неизменяемые создают новый объект при изменении",
      "incorrect_answers": {
        "1": "Изменяемые типы данных не могут быть изменены после создания, а неизменяемые могут.",
        "2": "Изменяемые типы данных не могут быть скопированы, а неизменяемые могут."
      }
    },
    {
      "theme": "Python",
      "question": "Что  такое сборщик мусора?",
      "explanation": "Ответственный за автоматическую утилизацию объектов,которые больше не используются в программе.Он просматривает объекты, которые никогда не будут использоваться или недоступны, чтобы высвободить пм-ть",
      "correct_answer": "Алгоритм, который ищет и удаляет неиспользуемые объекты в памяти",
      "incorrect_answers": {
        "1": "Инструмент для компиляции кода\r\n",
        "2": "Программист, который собирает мусор"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое полиморфизм в ООП?",
      "explanation": "Полиморфизм позволяет использовать один метод или свойство для разных объектов.",
      "correct_answer": "Механизм, позволяющий одному объекту принимать различные формы",
      "incorrect_answers": {
        "1": "Объектная инкапсуляция",
        "2": "Метод конструкции класса"
      }
    },
    {
      "theme": "Python",
      "question": "Что такое подход TDD (Test Driver Development) в Python?\r\n",
      "explanation": "Подразумевает сначала написание тестов на функционал, а затем написание самой функции, которая должна проходить эти тесты. Это помогает быстрее выявлять и исправлять ошибки в процессе разработки",
      "correct_answer": "Способ разработки, при котором сначала пишутся тесты на функционал, а затем сам функционал",
      "incorrect_answers": {
        "1": "Метод, который используется только при отладке кода",
        "2": "Подход, при котором написание тестов откладывается на последний этап разработки\r\n"
      }
    },
    {
      "theme": "Python",
      "question": "Какие условные операторы знаете в Python?",
      "explanation": "В Python наиболее распространенные условные операторы это if, else и elif. Оператор if - для проверки одного условия, оператор elif - для проверки нескольких вариантов условий, а else - для остальных.",
      "correct_answer": "if, else, elif",
      "incorrect_answers": {
        "1": "else, for",
        "2": "if, else"
      }
    }
  ]
}